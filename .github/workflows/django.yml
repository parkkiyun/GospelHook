name: Django CI/CD

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.11]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: gospelhook_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create .env file
      run: |
        cat > .env << EOF
        SECRET_KEY=test-secret-key-for-ci
        DEBUG=True
        ALLOWED_HOSTS=localhost,127.0.0.1
        DATABASE_URL=postgres://postgres:postgres@localhost:5432/gospelhook_test
        JWT_SECRET_KEY=test-jwt-secret
        EOF
    
    - name: Run migrations
      run: |
        python manage.py migrate
    
    - name: Run tests
      run: |
        pytest --verbose --cov=. --cov-report=xml --cov-report=term
    
    - name: Run linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with Black
      run: |
        black . --check --diff
    
    - name: Security check with Bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        if [ -f bandit-report.json ]; then
          echo "Security issues found. Please review bandit-report.json"
        fi
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  docker-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Check if Dockerfile exists
      run: |
        if [ ! -f Dockerfile ]; then
          echo "Dockerfile not found. Skipping Docker build check."
          exit 0
        fi
    
    - name: Build Docker image (if Dockerfile exists)
      if: success()
      run: |
        if [ -f Dockerfile ]; then
          docker build . -t gospelhook:test
        fi